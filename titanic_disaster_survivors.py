# -*- coding: utf-8 -*-
"""titanic-disaster-survivors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jd_Tg4dZcsn8RM-nzu-IDU5deqC9UArL
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""- Survived: 0 = no, 1 = yes
- Pclass (Class):1 = 1º, 2 = 2º, 3 = 3º
- Sex: passenger sex
- Age: age in years
- Sibsp: Siblings / Spouses on board
- Parch: Quantidade de pais / crianças a bordo do Titanic
- Ticket: ticket number
- Fare: Fare paid by the passenger
- Cabin: cabin number
- Embarked: departure port (C = Cherbourg, Q = Queenstown, S = Southampton)
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

import tensorflow as tf

"""# Data"""

train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')

# train_df = pd.read_csv('../input/titanic/train.csv')

# test_df = pd.read_csv('../input/titanic/test.csv')

train_df.head()

test_df.head()

train_df.shape

"""## Features"""

train_df.columns.values

train_df.info()

test_df.info()

train_df['Survived'].value_counts()

train_df['Survived'].value_counts().plot.pie(colors=('tab:red', 'tab:blue'), shadow=True,
                                             labels=('Not survived','Survived'),
                                            figsize=(8,5), startangle=90, autopct='%1.1f%%',
                                            title='Porcentage of survivors', fontsize=18).set_ylabel=('')
plt.show()

"""### Percentage of survivors in each class:"""

train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)

ax = train_df.pivot_table(index='Pclass',values='Name',aggfunc='count').plot(kind='bar', rot=0, legend=None,
                                                                        label='index', figsize=(8,5))

ax.set_xlabel('Class', fontsize = 14)
ax.set_title('People per class', fontsize = 20, pad=10)
plt.show()

ax = train_df[train_df['Survived'] == 1].groupby('Pclass').sum()['Survived'].plot(kind='bar', rot=0, legend=None,
                                                                        label='index',figsize=(8,5))
ax.set_xlabel('Class', fontsize = 14)
ax.set_title('Survivors per class', fontsize = 20, pad=10)
plt.show()

"""- Despite having more people in class-3, class-1 had more survivors."""

ax = train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().set_index('Pclass').plot(kind='bar',
                                                                                                    rot=0,
                                                                                                    legend=None,
                                                                                                    figsize=(8,5))
ax.set_title('Survivors Percentage in each class', fontsize=20)
ax.set_xlabel('Class', fontsize=14)
ax.annotate('62.9%', xy = (-0.15, 0.16), fontsize = 16)
ax.annotate('47.3%', xy = (0.82, 0.16), fontsize = 16)
ax.annotate('24.2%', xy = (1.83, 0.16), fontsize = 16)
plt.show()

"""### Percentage of survived women and men:"""

# male and female percentage
train_df['Sex'].value_counts(normalize=True) * 100

train_df[["Sex", "Survived"]].groupby(['Sex'], as_index=False).mean().set_index('Sex') * 100

train_df.pivot_table('PassengerId', ['Sex'], 'Pclass', aggfunc='count')

"""- We note there is a huge difference between male and female percentage survivors.

### Survivors according the amount of siblings/spouses on board:
"""

train_df[["SibSp", "Survived"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)

"""### Survivors according the amount of parents/children on board:"""

train_df[["Parch", "Survived"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)

"""## Suvivors by age:"""

g = sns.FacetGrid(train_df, col='Survived', height=5)
g.map(plt.hist, 'Age', bins=30)
plt.show()



